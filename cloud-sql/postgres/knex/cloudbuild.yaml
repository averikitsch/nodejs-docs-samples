steps:
# Build the container image
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: '/bin/bash'
  args:
    - '-c'
    - |
      set -e
      # gcloud services enable sqladmin.googleapis.com
      # gcloud sql instances create test-samples \
      # --database-version=POSTGRES_12 \
      # --region=us-central1 \
      # --cpu=2 \
      # --memory=7680MB
      # gcloud sql databases create testDB --instance=test-samples
      # gcloud sql users create root --instance=test-samples \
      #  --password=testPW
      curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.darwin.amd64
      chmod +x cloud_sql_proxy
      gcloud beta sql connect test-samples -u testPW -d testDB

docker run -d \
  -v $GOOGLE_APPLICATION_CREDENTIALS:/config \
  -p 127.0.0.1:3306:3306 \
  gcr.io/cloudsql-docker/gce-proxy:1.16 /cloud_sql_proxy \
  -instances=$PROJECT_ID:us-central1:test-samples=tcp:0.0.0.0:3306 -credential_file=/config

  ~/code/cloud_sql_proxy -instances=$PROJECT_ID:us-central1:test-samples=tcp:8081


docker run -d \
  -p 127.0.0.1:3306:3306 \
  -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/keys/FILE_NAME.json \
  -v $GOOGLE_APPLICATION_CREDENTIALS:/tmp/keys/FILE_NAME.json:ro \
  gcr.io/cloudsql-docker/gce-proxy:1.16 /cloud_sql_proxy \
  -instances=$PROJECT_ID:us-central1:test-samples=tcp:0.0.0.0:3306
steps:
# gcloud sql instances create ${_CLOUD_SQL_INSTANCE} \
# --database-version=POSTGRES_12 \
# --region=${_REGION}
#
# gcloud sql databases create ${_DB_NAME} --instance=${_CLOUD_SQL_INSTANCE}
#
# gcloud sql users create ${_DB_USER} --instance=${_CLOUD_SQL_INSTANCE} \
#  --password=${_DB_PASS}


# - id: 'Cloud SQL'
#   name: 'gcr.io/cloud-builders/gcloud:$_CLOUDSDK_VERSION'
#   entrypoint: '/bin/bash'
#   args:
#     - |
#       gcloud sql connect ${_CLOUD_SQL_INSTANCE} -u ${_DB_USER} -d ${_DB_NAME}
#
# - id: 'Create Table'
#   name: 'node:10'
#   entrypoint: '/bin/bash'
#   args:
#     - |
#       node scripts/createTable.js \
#       ${_DB_USER} ${_DB_PASS} ${_DB_NAME} \
#       $PROJECT_ID:${_REGION}:${_CLOUD_SQL_INSTANCE}

# - id:
#   name:
#   entrypoint:
#   args:
#
- id: 'Build Container Image'
  name: 'gcr.io/cloud-builders/docker:latest'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/${_SERVICE}', '.'] # Tag docker image with git commit sha
#
# - id: 'Push Container Image'
#   name: 'gcr.io/cloud-builders/docker:latest'
#   args: ['push', 'gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA}']
#
# - id: 'Deploy to Cloud Run'
#   name: 'gcr.io/cloud-builders/gcloud:$_CLOUDSDK_VERSION'
#   entrypoint: /bin/bash
#   args:
#   - '-c'
#   - |
#     gcloud run deploy ${_SERVICE} \
#       --image gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA} \
#       --no-allow-unauthenticated \
#       --platform managed
#
# - id: 'Get Cloud Run URL'
#   name: 'gcr.io/cloud-builders/gcloud:$_CLOUDSDK_VERSION'
#   entrypoint: '/bin/bash'
#   args:
#   - '-c'
#   - |
#     set -e
#     source /workspace/testing/cloudbuild-templates/common.sh
#     echo $(get_url) > _service_url
#     echo "Cloud Run URL for ${_SERVICE}-$(cat _short_id) is $(cat _service_url)"
#     echo $(get_idtoken) > _id_token
#   env:
#     # Make substitutions available in shell script.
#     - "_SECRET_NAME=${_SECRET_NAME}"
#     - "_RUNNER_IDENTITY=${_RUNNER_IDENTITY}"
#     - "_SERVICE=${_SERVICE}"
#
# # This does not seem like expected behavior. For example:
#
# - id: 'Integration Tests'
#   # TODO: Update the following image name, entrypoint, and args to fit your testing needs
#   name: 'gcr.io/cloud-builders/curl'
#   entrypoint: '/bin/sh'
#   args:
#   - '-c'
#   - |
#     set -e
#     curl -si --fail --show-error -H "Authorization: Bearer $(cat _id_token)" "$(cat _service_url)"
# - id: 'Teardown'
#   name: 'gcr.io/cloud-builders/gcloud:$_CLOUDSDK_VERSION'
#   entrypoint: '/bin/bash'
#   args:
#   - '-c'
#   - |
#     set -x
#     gcloud --quiet container images delete gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA}
#     gcloud --quiet run services delete ${_SERVICE}-$(cat _short_id) --region ${_SERVICE_REGION} --platform managed
#     set +x
#     echo "View build details in the console: https://console.cloud.google.com/cloud-build/builds/${BUILD_ID}"
# Uncomment if skipping teardown to associate build with container image.
# images:
# - 'gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA}'

options:
  env:
    - "CLOUDSDK_RUN_REGION=${_SERVICE_REGION}"
    - "GOOGLE_CLOUD_PROJECT=${PROJECT_ID}"

# TODO: Update these User-defined substitutions
substitutions:
  _CLOUD_SQL_INSTANCE: test-samples
  _DB_USER: root
  _DB_PASS: testPW
  _DB_NAME: testDB
  _REGION: us-central1
  _CLOUDSDK_VERSION: latest
